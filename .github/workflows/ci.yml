name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

env:
  CARGO_TERM_COLOR: always

jobs:
  style:
    name: Check style
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || !github.event.pull_request.draft

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        components: rustfmt
        profile: minimal
        override: true

    - name: Cargo fmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

  typos:
    name: Spell Check with Typos
    needs: [style]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || !github.event.pull_request.draft

    steps:
    - name: Checkout Actions Repository
      uses: actions/checkout@v2

    - name: Check the spelling of the files in our repo
      uses: crate-ci/typos@master

  clippy:
    name: Run clippy
    needs: [style]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || !github.event.pull_request.draft

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        components: clippy
        profile: minimal
        override: true

    - name: Load cache
      uses: Swatinem/rust-cache@v1

    - name: Clippy
      uses: actions-rs/cargo@v1
      with:
        command: run
        args: -p xtask -- ci clippy

  test-features:
    name: ${{ matrix.name }}
    if: github.event_name == 'push' || !github.event.pull_request.draft

    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      fail-fast: true
      matrix:
        name:
          - linux / features-no-encryption
          - linux / features-no-sled
          - linux / features-no-encryption-and-sled
          - linux / features-sled_cryptostore
          - linux / features-rustls-tls
          - linux / features-markdown
          - linux / features-socks
          - linux / features-sso_login

        include:
          - name: linux / features-no-encryption
            cargo_args: --no-default-features --features "sled_state_store, native-tls"

          - name: linux / features-no-sled
            cargo_args: --no-default-features --features "encryption, native-tls"

          - name: linux / features-no-encryption-and-sled
            cargo_args: --no-default-features --features "native-tls"

          - name: linux / features-sled_cryptostore
            cargo_args: --no-default-features --features "encryption, sled_cryptostore, native-tls"

          - name: linux / features-rustls-tls
            cargo_args: --no-default-features --features rustls-tls

          - name: linux / features-markdown
            cargo_args: --features markdown

          - name: linux / features-socks
            cargo_args: --features socks

          - name: linux / features-sso_login
            cargo_args: --features sso_login

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Load cache
        uses: Swatinem/rust-cache@v1

      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path crates/matrix-sdk/Cargo.toml ${{ matrix.cargo_args }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path crates/matrix-sdk/Cargo.toml ${{ matrix.cargo_args }}

  test:
    name: ${{ matrix.name }}
    if: github.event_name == 'push' || !github.event.pull_request.draft

    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      fail-fast: true
      matrix:
        name:
          - linux / stable
          - linux / beta
          - macOS / stable

        include:
          - name: linux / stable

          - name: linux / beta
            rust: beta

          - name: macOS / stable
            os: macOS-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Load cache
        uses: Swatinem/rust-cache@v1

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
